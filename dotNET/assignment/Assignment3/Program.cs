using System.Dynamic;
using System.Numerics;
using System.Xml.Linq;

namespace EmployeeWithInheritance
{
    internal class Program
    {
        static void Main2(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }


    public abstract class  Employee
    {
        private static int empNoCounter = 1;
        private int empNo;
        private string name;
        private  decimal basic;
        private short deptNo;

        public Employee()
        {
            this.empNo = empNoCounter++;
        }
        public Employee(string name, short deptNo = 3)
        {
            this.empNo = empNoCounter++;
            Name = name;
            DeptNo = deptNo;
        }

        public int EmpNo
        {
            get
            {
                return empNo;
            }
        }
        public string Name
        {
            set
            {
                if (value.Trim().Length != 0)
                    name = value;
                else
                    Console.WriteLine("Name cannot be blank");
            }
            get
            {
                return name;
            }
        }

        public abstract decimal Basic {
            set ;
            get ;
        }
  

        public short DeptNo
        {
            set
            {
                if (value > 0)
                    deptNo = value;
                else
                    Console.WriteLine("dept no should be greater than 0 ");
            }
            get
            {
                return deptNo;
            }
        }

        public abstract decimal GetNetSalary();

        public override string ToString()
        {
            return "Employee no: " + EmpNo + " Name  " + Name + " Basic " + Basic + " Dept " + DeptNo;
        }
    }


    public class Manager : Employee
    {
        public Manager():base() { 
            Basic = 40001;
        }
        public Manager(string name, decimal basic , short deptNo ) : base(name, deptNo)
        {
            Basic = basic;
        }

        public Manager(string name, short deptNo) : base(name, deptNo)
        {
        }

        public override decimal Basic {
            get {
                return Basic;
            }
            set
            {   // Minimum salary should be 40k 
                if (value > 40000)
                    Basic = value;
                else
                    Console.WriteLine("Salary should be more than 40000");
            }   
        }

        public override decimal GetNetSalary()
        {   // 30% increment on base salary
            return 1.30m*Basic;
        }
    }

    public class GeneralManger : Manager
    {
        public GeneralManger() : base() {
            Basic = 60001;
        }

        public GeneralManger((string name, decimal basic, short deptNo) : base(name, deptNo) { 
            
        }
        public override decimal Basic
        {
            get
            {
                return Basic;
            }
            set
            { // Minimum salary should be 60k
                if (value > 60000)
                    Basic = value;
                else
                    Console.WriteLine("Salary should be more than 40000");
            }

        }

        public override decimal GetNetSalary()
        {   // 45% increment on base salary
            return 1.45m * Basic;
        }
    }

    public class CEO : Employee
    {
        public override decimal Basic
        {
            get
            {
                return Basic;
            }
            set
            { // 100k 
                if (value > 100000)
                    Basic = value;
                else
                    Console.WriteLine("Salary should be more than 40000");
            }

        }

        public override decimal GetNetSalary()
        {   // 50% increment on base salary
            return 1.50m * Basic;
        }
    }


    public interface IDbFunctions
    {
        void Insert();
        void Update();
        void Delete();
    }

    public class Department {
        //static int  deptNo;
        public int DeptNo { get; set; }
        static void Main(string[] args)
        {
            Department d = new Department();
            Console.WriteLine("Enter dept no " );
            d.DeptNo = Convert.ToInt32(Console.ReadLine());
        }
    }

    /*    Create the following classes
    Employee
       Prop
        string Name -> no blanks
        int EmpNo -> readonly, autogenerated
        short DeptNo -> > 0
        abstract decimal Basic
       Methods
        abstract decimal CalcNetSalary()

    Manager : Employee
       Prop
        string Designation -> cant be blank
    GeneralManager : Manager
       Prop
         string Perks -> no validations
    CEO : Employee
        Make CalNetSalary() a sealed method

    NOTE : Overloaded constructors in all classes calling their base class constructor
    All classes must implement IDbFunctions interface
    All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.*/
}